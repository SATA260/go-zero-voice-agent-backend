syntax = "proto3";

package pb;
option go_package="./pb";

message User {
  int64 id = 1;
  string email = 3;
  string nickname = 2;
  int64 sex = 4;
  string avatar = 5;
  string info = 6;
}

message UserAuth {
  string id = 1;
  string userId = 2;
  string authType = 3;
  string authKey = 4;
}

message RegisterReq {
  string email = 1;
  string nickname = 2;
  string password = 3;
  string authKey = 4;
  string authType = 5;
  string verifyCode = 6;
}
message RegisterResp {
  string accessToken = 1;
  int64 accessExpire = 2;
  int64 refreshAfter = 3;
}

message LoginReq {
  string authType = 1;
  string authKey = 2;
  string password = 3;
}
message LoginResp {
  string accessToken = 1;
  int64 accessExpire = 2;
  int64 refreshAfter = 3;
}

message GetUserInfoReq {
  int64 id = 1;
}
message GetUserInfoResp {
  User user = 1;
}

message GetUserAuthByAuthKeyReq {
  string authKey = 1;
  string authType = 2;
}
message GetUserAuthByAuthKeyResp {
  UserAuth userAuth = 1;
}

message GetUserAuthByUserIdReq {
  string userId = 1;
  string authType = 2;
}
message GetUserAuthByUserIdResp {
  UserAuth userAuth = 1;
}

message GenerateTokenReq {
  int64 userId = 1;
}
message GenerateTokenResp {
  string accessToken = 1;
  int64 accessExpire = 2;
  int64 refreshAfter = 3;
}

message SendEmailReq {
  string from = 1;
  string to = 2;
  string subject = 3;
  string text = 4;
  string html = 5;
}
message SendEmailResp {
  int64 sendAt = 1;
}

message SendVerifyCodeReq {
  string email = 1;
  int64 accessExpire = 2;
}
message SendVerifyCodeResp {
  int64 sendAt = 1;
}

message VerifyTokenReq {
  string token = 1;
}
message VerifyTokenResp {
  int64 userId = 1;
}

service Usercenter {
  rpc Register(RegisterReq) returns (RegisterResp);
  rpc Login(LoginReq) returns (LoginResp);
  rpc GetUserInfo(GetUserInfoReq) returns (GetUserInfoResp);
  rpc GetUserAuthByAuthKey(GetUserAuthByAuthKeyReq) returns (GetUserAuthByAuthKeyResp);
  rpc GetUserAuthByUserId(GetUserAuthByUserIdReq) returns (GetUserAuthByUserIdResp);
  rpc GenerateToken(GenerateTokenReq) returns (GenerateTokenResp);
  rpc SendEmail(SendEmailReq) returns (SendEmailResp);
  rpc SendVerifyCode(SendVerifyCodeReq) returns (SendVerifyCodeResp);
  rpc VerifyToken(VerifyTokenReq) returns (VerifyTokenResp);
}